import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
    id 'java-library'
    id 'de.marcphilipp.nexus-publish' version '0.4.0'
    id 'maven-publish'
    id 'signing'
    // check dependency updates: ./gradlew dependencyUpdates -Drevision=release
    id 'com.github.ben-manes.versions' version '0.34.0'
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'io.codearte.nexus-staging' version '0.22.0'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {

    ext.jacksonVersion="2.11.3"
    ext.httpClientVersion="4.5.13"
    ext.lombokVersion="1.18.16"

    compile "nl.stokpop:event-scheduler:3.0.0-M2-SNAPSHOT"
    compile "org.apache.httpcomponents:httpclient:$httpClientVersion"
    compile "org.apache.httpcomponents:httpmime:$httpClientVersion"
    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    // for correct date time parsing in json
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    testCompile "junit:junit:4.13.1"
    testCompile "com.github.tomakehurst:wiremock-jre8:2.27.2"
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    // enable logging in tests, e.g. to see HttpClient traffic, see test resource logback.xml
    testRuntime "org.slf4j:jcl-over-slf4j:1.7.30"
    testRuntime "ch.qos.logback:logback-classic:1.2.3"
}

group = 'io.perfana'
version = '1.1.0-SNAPSHOT'
description = 'test-events-loadrunner-cloud'
sourceCompatibility = '1.8'

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

license {
    // license check is broken on windows, skip
    if (OperatingSystem.current().isWindows()) ignoreFailures = true
    header = file("src/main/resources/META-INF/LICENSE.txt")
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'Peter Paul Bakker, Perfana'
    excludes(["**/*.txt", "src/main/resources/META-INF/services/**"])
    // the standard java style makes intellij complain about dangling javadoc
    mapping('java', 'SLASHSTAR_STYLE')
    skipExistingHeaders true
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

if (project.hasProperty('release')) {

    subprojects {

        task javadocJar(type: Jar) {
            archiveClassifier.set('javadoc')
            from javadoc
        }

        task sourcesJar(type: Jar) {
            archiveClassifier.set('sources')
            from sourceSets.main.allSource
        }

        artifacts {
            archives javadocJar, sourcesJar
        }
    }

    allprojects {
        apply plugin: 'signing'
        apply plugin: 'maven'

        // Signature of artifacts
        signing {
            sign configurations.archives
        }
        // OSSRH publication
        uploadArchives {
            repositories {
                mavenDeployer {
                    // POM signature
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    // Target repository
                    String repositoryUrl
                    if (version.endsWith("SNAPSHOT")) {
                        repositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                    }
                    else {
                        repositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                    }
                    repository(url: repositoryUrl) {
                        authentication(userName: ossrhUser, password: ossrhPassword)
                    }
                    pom.project {
                        name project.getName()
                        description project.description
                        packaging 'jar'
                        url 'https://github.com/perfana/test-events-loadrunner-cloud.git'

                        scm {
                            connection 'scm:git:https://github.com/perfana/test-events-loadrunner-cloud.git'
                            developerConnection 'scm:git:git@github.com:perfana/test-events-loadrunner-cloud.git'
                            url 'https://github.com/perfana/test-events-loadrunner-cloud.git'
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id = 'stokpop'
                                name = 'Peter Paul Bakker'
                                email = 'peter.paul.bakker@stokpop.nl'
                            }
                        }
                    }
                }
            }
        }

    }
}

nexusStaging {
    username = project.properties['ossrhUser'] ?: "noUser"
    password = project.properties['ossrhPassword'] ?: "noPassword"
}

